// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/callhistory.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallHistoryStoreServiceClient is the client API for CallHistoryStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallHistoryStoreServiceClient interface {
	GetCallHistory(ctx context.Context, in *GetCallHistoryRequest, opts ...grpc.CallOption) (*GetCallHistoryResponse, error)
	PutCallHistory(ctx context.Context, in *PutCallHistoryRequest, opts ...grpc.CallOption) (*PutCallHistoryResponse, error)
	DeleteCallHistory(ctx context.Context, in *DeleteCallHistoryRequest, opts ...grpc.CallOption) (*DeleteCallHistoryResponse, error)
}

type callHistoryStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallHistoryStoreServiceClient(cc grpc.ClientConnInterface) CallHistoryStoreServiceClient {
	return &callHistoryStoreServiceClient{cc}
}

func (c *callHistoryStoreServiceClient) GetCallHistory(ctx context.Context, in *GetCallHistoryRequest, opts ...grpc.CallOption) (*GetCallHistoryResponse, error) {
	out := new(GetCallHistoryResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CallHistoryStoreService/GetCallHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callHistoryStoreServiceClient) PutCallHistory(ctx context.Context, in *PutCallHistoryRequest, opts ...grpc.CallOption) (*PutCallHistoryResponse, error) {
	out := new(PutCallHistoryResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CallHistoryStoreService/PutCallHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callHistoryStoreServiceClient) DeleteCallHistory(ctx context.Context, in *DeleteCallHistoryRequest, opts ...grpc.CallOption) (*DeleteCallHistoryResponse, error) {
	out := new(DeleteCallHistoryResponse)
	err := c.cc.Invoke(ctx, "/api.v1.CallHistoryStoreService/DeleteCallHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallHistoryStoreServiceServer is the server API for CallHistoryStoreService service.
// All implementations should embed UnimplementedCallHistoryStoreServiceServer
// for forward compatibility
type CallHistoryStoreServiceServer interface {
	GetCallHistory(context.Context, *GetCallHistoryRequest) (*GetCallHistoryResponse, error)
	PutCallHistory(context.Context, *PutCallHistoryRequest) (*PutCallHistoryResponse, error)
	DeleteCallHistory(context.Context, *DeleteCallHistoryRequest) (*DeleteCallHistoryResponse, error)
}

// UnimplementedCallHistoryStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCallHistoryStoreServiceServer struct {
}

func (UnimplementedCallHistoryStoreServiceServer) GetCallHistory(context.Context, *GetCallHistoryRequest) (*GetCallHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallHistory not implemented")
}
func (UnimplementedCallHistoryStoreServiceServer) PutCallHistory(context.Context, *PutCallHistoryRequest) (*PutCallHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCallHistory not implemented")
}
func (UnimplementedCallHistoryStoreServiceServer) DeleteCallHistory(context.Context, *DeleteCallHistoryRequest) (*DeleteCallHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCallHistory not implemented")
}

// UnsafeCallHistoryStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallHistoryStoreServiceServer will
// result in compilation errors.
type UnsafeCallHistoryStoreServiceServer interface {
	mustEmbedUnimplementedCallHistoryStoreServiceServer()
}

func RegisterCallHistoryStoreServiceServer(s grpc.ServiceRegistrar, srv CallHistoryStoreServiceServer) {
	s.RegisterService(&CallHistoryStoreService_ServiceDesc, srv)
}

func _CallHistoryStoreService_GetCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallHistoryStoreServiceServer).GetCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CallHistoryStoreService/GetCallHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallHistoryStoreServiceServer).GetCallHistory(ctx, req.(*GetCallHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallHistoryStoreService_PutCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCallHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallHistoryStoreServiceServer).PutCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CallHistoryStoreService/PutCallHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallHistoryStoreServiceServer).PutCallHistory(ctx, req.(*PutCallHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallHistoryStoreService_DeleteCallHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCallHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallHistoryStoreServiceServer).DeleteCallHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.CallHistoryStoreService/DeleteCallHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallHistoryStoreServiceServer).DeleteCallHistory(ctx, req.(*DeleteCallHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallHistoryStoreService_ServiceDesc is the grpc.ServiceDesc for CallHistoryStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallHistoryStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.CallHistoryStoreService",
	HandlerType: (*CallHistoryStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCallHistory",
			Handler:    _CallHistoryStoreService_GetCallHistory_Handler,
		},
		{
			MethodName: "PutCallHistory",
			Handler:    _CallHistoryStoreService_PutCallHistory_Handler,
		},
		{
			MethodName: "DeleteCallHistory",
			Handler:    _CallHistoryStoreService_DeleteCallHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/callhistory.proto",
}
