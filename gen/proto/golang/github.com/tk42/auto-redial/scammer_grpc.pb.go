// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/scammer.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScammerStoreServiceClient is the client API for ScammerStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScammerStoreServiceClient interface {
	GetScammer(ctx context.Context, in *GetScammerRequest, opts ...grpc.CallOption) (*GetScammerResponse, error)
	PutScammer(ctx context.Context, in *PutScammerRequest, opts ...grpc.CallOption) (*PutScammerResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	UpdateCall(ctx context.Context, in *UpdateCallRequest, opts ...grpc.CallOption) (*UpdateCallResponse, error)
	DeleteScammer(ctx context.Context, in *DeleteScammerRequest, opts ...grpc.CallOption) (*DeleteScammerResponse, error)
}

type scammerStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScammerStoreServiceClient(cc grpc.ClientConnInterface) ScammerStoreServiceClient {
	return &scammerStoreServiceClient{cc}
}

func (c *scammerStoreServiceClient) GetScammer(ctx context.Context, in *GetScammerRequest, opts ...grpc.CallOption) (*GetScammerResponse, error) {
	out := new(GetScammerResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ScammerStoreService/GetScammer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scammerStoreServiceClient) PutScammer(ctx context.Context, in *PutScammerRequest, opts ...grpc.CallOption) (*PutScammerResponse, error) {
	out := new(PutScammerResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ScammerStoreService/PutScammer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scammerStoreServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ScammerStoreService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scammerStoreServiceClient) UpdateCall(ctx context.Context, in *UpdateCallRequest, opts ...grpc.CallOption) (*UpdateCallResponse, error) {
	out := new(UpdateCallResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ScammerStoreService/UpdateCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scammerStoreServiceClient) DeleteScammer(ctx context.Context, in *DeleteScammerRequest, opts ...grpc.CallOption) (*DeleteScammerResponse, error) {
	out := new(DeleteScammerResponse)
	err := c.cc.Invoke(ctx, "/api.v1.ScammerStoreService/DeleteScammer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScammerStoreServiceServer is the server API for ScammerStoreService service.
// All implementations should embed UnimplementedScammerStoreServiceServer
// for forward compatibility
type ScammerStoreServiceServer interface {
	GetScammer(context.Context, *GetScammerRequest) (*GetScammerResponse, error)
	PutScammer(context.Context, *PutScammerRequest) (*PutScammerResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	UpdateCall(context.Context, *UpdateCallRequest) (*UpdateCallResponse, error)
	DeleteScammer(context.Context, *DeleteScammerRequest) (*DeleteScammerResponse, error)
}

// UnimplementedScammerStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScammerStoreServiceServer struct {
}

func (UnimplementedScammerStoreServiceServer) GetScammer(context.Context, *GetScammerRequest) (*GetScammerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScammer not implemented")
}
func (UnimplementedScammerStoreServiceServer) PutScammer(context.Context, *PutScammerRequest) (*PutScammerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutScammer not implemented")
}
func (UnimplementedScammerStoreServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedScammerStoreServiceServer) UpdateCall(context.Context, *UpdateCallRequest) (*UpdateCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCall not implemented")
}
func (UnimplementedScammerStoreServiceServer) DeleteScammer(context.Context, *DeleteScammerRequest) (*DeleteScammerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScammer not implemented")
}

// UnsafeScammerStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScammerStoreServiceServer will
// result in compilation errors.
type UnsafeScammerStoreServiceServer interface {
	mustEmbedUnimplementedScammerStoreServiceServer()
}

func RegisterScammerStoreServiceServer(s grpc.ServiceRegistrar, srv ScammerStoreServiceServer) {
	s.RegisterService(&ScammerStoreService_ServiceDesc, srv)
}

func _ScammerStoreService_GetScammer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScammerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScammerStoreServiceServer).GetScammer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ScammerStoreService/GetScammer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScammerStoreServiceServer).GetScammer(ctx, req.(*GetScammerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScammerStoreService_PutScammer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutScammerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScammerStoreServiceServer).PutScammer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ScammerStoreService/PutScammer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScammerStoreServiceServer).PutScammer(ctx, req.(*PutScammerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScammerStoreService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScammerStoreServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ScammerStoreService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScammerStoreServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScammerStoreService_UpdateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScammerStoreServiceServer).UpdateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ScammerStoreService/UpdateCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScammerStoreServiceServer).UpdateCall(ctx, req.(*UpdateCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScammerStoreService_DeleteScammer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScammerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScammerStoreServiceServer).DeleteScammer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ScammerStoreService/DeleteScammer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScammerStoreServiceServer).DeleteScammer(ctx, req.(*DeleteScammerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScammerStoreService_ServiceDesc is the grpc.ServiceDesc for ScammerStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScammerStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ScammerStoreService",
	HandlerType: (*ScammerStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScammer",
			Handler:    _ScammerStoreService_GetScammer_Handler,
		},
		{
			MethodName: "PutScammer",
			Handler:    _ScammerStoreService_PutScammer_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ScammerStoreService_UpdateTag_Handler,
		},
		{
			MethodName: "UpdateCall",
			Handler:    _ScammerStoreService_UpdateCall_Handler,
		},
		{
			MethodName: "DeleteScammer",
			Handler:    _ScammerStoreService_DeleteScammer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/scammer.proto",
}
