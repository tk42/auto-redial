// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/matching.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchingQueueStoreServiceClient is the client API for MatchingQueueStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingQueueStoreServiceClient interface {
	GetMatchingQueue(ctx context.Context, in *GetMatchingQueueRequest, opts ...grpc.CallOption) (*GetMatchingQueueResponse, error)
	PutMatchingQueue(ctx context.Context, in *PutMatchingQueueRequest, opts ...grpc.CallOption) (*PutMatchingQueueResponse, error)
	DeleteMatchingQueue(ctx context.Context, in *DeleteMatchingQueueRequest, opts ...grpc.CallOption) (*DeleteMatchingQueueResponse, error)
}

type matchingQueueStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingQueueStoreServiceClient(cc grpc.ClientConnInterface) MatchingQueueStoreServiceClient {
	return &matchingQueueStoreServiceClient{cc}
}

func (c *matchingQueueStoreServiceClient) GetMatchingQueue(ctx context.Context, in *GetMatchingQueueRequest, opts ...grpc.CallOption) (*GetMatchingQueueResponse, error) {
	out := new(GetMatchingQueueResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MatchingQueueStoreService/GetMatchingQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingQueueStoreServiceClient) PutMatchingQueue(ctx context.Context, in *PutMatchingQueueRequest, opts ...grpc.CallOption) (*PutMatchingQueueResponse, error) {
	out := new(PutMatchingQueueResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MatchingQueueStoreService/PutMatchingQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingQueueStoreServiceClient) DeleteMatchingQueue(ctx context.Context, in *DeleteMatchingQueueRequest, opts ...grpc.CallOption) (*DeleteMatchingQueueResponse, error) {
	out := new(DeleteMatchingQueueResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MatchingQueueStoreService/DeleteMatchingQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingQueueStoreServiceServer is the server API for MatchingQueueStoreService service.
// All implementations should embed UnimplementedMatchingQueueStoreServiceServer
// for forward compatibility
type MatchingQueueStoreServiceServer interface {
	GetMatchingQueue(context.Context, *GetMatchingQueueRequest) (*GetMatchingQueueResponse, error)
	PutMatchingQueue(context.Context, *PutMatchingQueueRequest) (*PutMatchingQueueResponse, error)
	DeleteMatchingQueue(context.Context, *DeleteMatchingQueueRequest) (*DeleteMatchingQueueResponse, error)
}

// UnimplementedMatchingQueueStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMatchingQueueStoreServiceServer struct {
}

func (UnimplementedMatchingQueueStoreServiceServer) GetMatchingQueue(context.Context, *GetMatchingQueueRequest) (*GetMatchingQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchingQueue not implemented")
}
func (UnimplementedMatchingQueueStoreServiceServer) PutMatchingQueue(context.Context, *PutMatchingQueueRequest) (*PutMatchingQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMatchingQueue not implemented")
}
func (UnimplementedMatchingQueueStoreServiceServer) DeleteMatchingQueue(context.Context, *DeleteMatchingQueueRequest) (*DeleteMatchingQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMatchingQueue not implemented")
}

// UnsafeMatchingQueueStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingQueueStoreServiceServer will
// result in compilation errors.
type UnsafeMatchingQueueStoreServiceServer interface {
	mustEmbedUnimplementedMatchingQueueStoreServiceServer()
}

func RegisterMatchingQueueStoreServiceServer(s grpc.ServiceRegistrar, srv MatchingQueueStoreServiceServer) {
	s.RegisterService(&MatchingQueueStoreService_ServiceDesc, srv)
}

func _MatchingQueueStoreService_GetMatchingQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchingQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingQueueStoreServiceServer).GetMatchingQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MatchingQueueStoreService/GetMatchingQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingQueueStoreServiceServer).GetMatchingQueue(ctx, req.(*GetMatchingQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingQueueStoreService_PutMatchingQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMatchingQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingQueueStoreServiceServer).PutMatchingQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MatchingQueueStoreService/PutMatchingQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingQueueStoreServiceServer).PutMatchingQueue(ctx, req.(*PutMatchingQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingQueueStoreService_DeleteMatchingQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMatchingQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingQueueStoreServiceServer).DeleteMatchingQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MatchingQueueStoreService/DeleteMatchingQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingQueueStoreServiceServer).DeleteMatchingQueue(ctx, req.(*DeleteMatchingQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingQueueStoreService_ServiceDesc is the grpc.ServiceDesc for MatchingQueueStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingQueueStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.MatchingQueueStoreService",
	HandlerType: (*MatchingQueueStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchingQueue",
			Handler:    _MatchingQueueStoreService_GetMatchingQueue_Handler,
		},
		{
			MethodName: "PutMatchingQueue",
			Handler:    _MatchingQueueStoreService_PutMatchingQueue_Handler,
		},
		{
			MethodName: "DeleteMatchingQueue",
			Handler:    _MatchingQueueStoreService_DeleteMatchingQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/matching.proto",
}

// MatchingStoreServiceClient is the client API for MatchingStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingStoreServiceClient interface {
	GetMatching(ctx context.Context, in *GetMatchingRequest, opts ...grpc.CallOption) (*GetMatchingResponse, error)
	PutMatching(ctx context.Context, in *PutMatchingRequest, opts ...grpc.CallOption) (*PutMatchingResponse, error)
	DeleteMatching(ctx context.Context, in *DeleteMatchingRequest, opts ...grpc.CallOption) (*DeleteMatchingResponse, error)
}

type matchingStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingStoreServiceClient(cc grpc.ClientConnInterface) MatchingStoreServiceClient {
	return &matchingStoreServiceClient{cc}
}

func (c *matchingStoreServiceClient) GetMatching(ctx context.Context, in *GetMatchingRequest, opts ...grpc.CallOption) (*GetMatchingResponse, error) {
	out := new(GetMatchingResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MatchingStoreService/GetMatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingStoreServiceClient) PutMatching(ctx context.Context, in *PutMatchingRequest, opts ...grpc.CallOption) (*PutMatchingResponse, error) {
	out := new(PutMatchingResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MatchingStoreService/PutMatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingStoreServiceClient) DeleteMatching(ctx context.Context, in *DeleteMatchingRequest, opts ...grpc.CallOption) (*DeleteMatchingResponse, error) {
	out := new(DeleteMatchingResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MatchingStoreService/DeleteMatching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingStoreServiceServer is the server API for MatchingStoreService service.
// All implementations should embed UnimplementedMatchingStoreServiceServer
// for forward compatibility
type MatchingStoreServiceServer interface {
	GetMatching(context.Context, *GetMatchingRequest) (*GetMatchingResponse, error)
	PutMatching(context.Context, *PutMatchingRequest) (*PutMatchingResponse, error)
	DeleteMatching(context.Context, *DeleteMatchingRequest) (*DeleteMatchingResponse, error)
}

// UnimplementedMatchingStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMatchingStoreServiceServer struct {
}

func (UnimplementedMatchingStoreServiceServer) GetMatching(context.Context, *GetMatchingRequest) (*GetMatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatching not implemented")
}
func (UnimplementedMatchingStoreServiceServer) PutMatching(context.Context, *PutMatchingRequest) (*PutMatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMatching not implemented")
}
func (UnimplementedMatchingStoreServiceServer) DeleteMatching(context.Context, *DeleteMatchingRequest) (*DeleteMatchingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMatching not implemented")
}

// UnsafeMatchingStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingStoreServiceServer will
// result in compilation errors.
type UnsafeMatchingStoreServiceServer interface {
	mustEmbedUnimplementedMatchingStoreServiceServer()
}

func RegisterMatchingStoreServiceServer(s grpc.ServiceRegistrar, srv MatchingStoreServiceServer) {
	s.RegisterService(&MatchingStoreService_ServiceDesc, srv)
}

func _MatchingStoreService_GetMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingStoreServiceServer).GetMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MatchingStoreService/GetMatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingStoreServiceServer).GetMatching(ctx, req.(*GetMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingStoreService_PutMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingStoreServiceServer).PutMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MatchingStoreService/PutMatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingStoreServiceServer).PutMatching(ctx, req.(*PutMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingStoreService_DeleteMatching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMatchingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingStoreServiceServer).DeleteMatching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MatchingStoreService/DeleteMatching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingStoreServiceServer).DeleteMatching(ctx, req.(*DeleteMatchingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingStoreService_ServiceDesc is the grpc.ServiceDesc for MatchingStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.MatchingStoreService",
	HandlerType: (*MatchingStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatching",
			Handler:    _MatchingStoreService_GetMatching_Handler,
		},
		{
			MethodName: "PutMatching",
			Handler:    _MatchingStoreService_PutMatching_Handler,
		},
		{
			MethodName: "DeleteMatching",
			Handler:    _MatchingStoreService_DeleteMatching_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/matching.proto",
}
