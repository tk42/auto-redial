// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/metric.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricStoreServiceClient is the client API for MetricStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricStoreServiceClient interface {
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
	PutMetric(ctx context.Context, in *PutMetricRequest, opts ...grpc.CallOption) (*PutMetricResponse, error)
	DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...grpc.CallOption) (*DeleteMetricResponse, error)
}

type metricStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricStoreServiceClient(cc grpc.ClientConnInterface) MetricStoreServiceClient {
	return &metricStoreServiceClient{cc}
}

func (c *metricStoreServiceClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MetricStoreService/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStoreServiceClient) PutMetric(ctx context.Context, in *PutMetricRequest, opts ...grpc.CallOption) (*PutMetricResponse, error) {
	out := new(PutMetricResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MetricStoreService/PutMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStoreServiceClient) DeleteMetric(ctx context.Context, in *DeleteMetricRequest, opts ...grpc.CallOption) (*DeleteMetricResponse, error) {
	out := new(DeleteMetricResponse)
	err := c.cc.Invoke(ctx, "/api.v1.MetricStoreService/DeleteMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricStoreServiceServer is the server API for MetricStoreService service.
// All implementations should embed UnimplementedMetricStoreServiceServer
// for forward compatibility
type MetricStoreServiceServer interface {
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
	PutMetric(context.Context, *PutMetricRequest) (*PutMetricResponse, error)
	DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricResponse, error)
}

// UnimplementedMetricStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetricStoreServiceServer struct {
}

func (UnimplementedMetricStoreServiceServer) GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedMetricStoreServiceServer) PutMetric(context.Context, *PutMetricRequest) (*PutMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMetric not implemented")
}
func (UnimplementedMetricStoreServiceServer) DeleteMetric(context.Context, *DeleteMetricRequest) (*DeleteMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetric not implemented")
}

// UnsafeMetricStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricStoreServiceServer will
// result in compilation errors.
type UnsafeMetricStoreServiceServer interface {
	mustEmbedUnimplementedMetricStoreServiceServer()
}

func RegisterMetricStoreServiceServer(s grpc.ServiceRegistrar, srv MetricStoreServiceServer) {
	s.RegisterService(&MetricStoreService_ServiceDesc, srv)
}

func _MetricStoreService_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStoreServiceServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MetricStoreService/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStoreServiceServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStoreService_PutMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStoreServiceServer).PutMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MetricStoreService/PutMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStoreServiceServer).PutMetric(ctx, req.(*PutMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStoreService_DeleteMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStoreServiceServer).DeleteMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.MetricStoreService/DeleteMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStoreServiceServer).DeleteMetric(ctx, req.(*DeleteMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricStoreService_ServiceDesc is the grpc.ServiceDesc for MetricStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.MetricStoreService",
	HandlerType: (*MetricStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetric",
			Handler:    _MetricStoreService_GetMetric_Handler,
		},
		{
			MethodName: "PutMetric",
			Handler:    _MetricStoreService_PutMetric_Handler,
		},
		{
			MethodName: "DeleteMetric",
			Handler:    _MetricStoreService_DeleteMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/metric.proto",
}
