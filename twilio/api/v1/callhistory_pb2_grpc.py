# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.v1 import callhistory_pb2 as api_dot_v1_dot_callhistory__pb2


class CallHistoryStoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCallHistory = channel.unary_unary(
                '/api.v1.CallHistoryStoreService/GetCallHistory',
                request_serializer=api_dot_v1_dot_callhistory__pb2.GetCallHistoryRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_callhistory__pb2.GetCallHistoryResponse.FromString,
                )
        self.PutCallHistory = channel.unary_unary(
                '/api.v1.CallHistoryStoreService/PutCallHistory',
                request_serializer=api_dot_v1_dot_callhistory__pb2.PutCallHistoryRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_callhistory__pb2.PutCallHistoryResponse.FromString,
                )
        self.DeleteCallHistory = channel.unary_unary(
                '/api.v1.CallHistoryStoreService/DeleteCallHistory',
                request_serializer=api_dot_v1_dot_callhistory__pb2.DeleteCallHistoryRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_callhistory__pb2.DeleteCallHistoryResponse.FromString,
                )


class CallHistoryStoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCallHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutCallHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCallHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CallHistoryStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCallHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCallHistory,
                    request_deserializer=api_dot_v1_dot_callhistory__pb2.GetCallHistoryRequest.FromString,
                    response_serializer=api_dot_v1_dot_callhistory__pb2.GetCallHistoryResponse.SerializeToString,
            ),
            'PutCallHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.PutCallHistory,
                    request_deserializer=api_dot_v1_dot_callhistory__pb2.PutCallHistoryRequest.FromString,
                    response_serializer=api_dot_v1_dot_callhistory__pb2.PutCallHistoryResponse.SerializeToString,
            ),
            'DeleteCallHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCallHistory,
                    request_deserializer=api_dot_v1_dot_callhistory__pb2.DeleteCallHistoryRequest.FromString,
                    response_serializer=api_dot_v1_dot_callhistory__pb2.DeleteCallHistoryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.v1.CallHistoryStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CallHistoryStoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCallHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1.CallHistoryStoreService/GetCallHistory',
            api_dot_v1_dot_callhistory__pb2.GetCallHistoryRequest.SerializeToString,
            api_dot_v1_dot_callhistory__pb2.GetCallHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutCallHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1.CallHistoryStoreService/PutCallHistory',
            api_dot_v1_dot_callhistory__pb2.PutCallHistoryRequest.SerializeToString,
            api_dot_v1_dot_callhistory__pb2.PutCallHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCallHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.v1.CallHistoryStoreService/DeleteCallHistory',
            api_dot_v1_dot_callhistory__pb2.DeleteCallHistoryRequest.SerializeToString,
            api_dot_v1_dot_callhistory__pb2.DeleteCallHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
